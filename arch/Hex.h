#pragma once

#include "General.h"
#include "Unit.h"

/*! \defgroup game_module Главный модуль
	@{
*/
namespace game_module
{
	class Unit;
	class Capital;
	//! Класс моделирует ячейку игрового поля.
	/*!
		Ячейка имеет шестиугольную форму.
		Другое имя класса, используемое в докуметации - гекс.
	*/
	class Hex 
	{
	private:
		//! Координаты гекса.
		/*! 
			Координаты неотрицательны.
			Первая координата указывает положение гекса на условной оси x,
			направленной слева направо, вторая координата координата
			положение гекса на условной оси y, напрвавленной сверху вниз.
		*/
		Pair Coordinates;
		//! Цвет гекса.
		hex_color Color;
		//! Указатель на юнит, находящийся в гексе.
		/*!
			В случае если юнита нет указатель равен nullptr.
		*/
		Unit * HexUnit;
		//! Указатель на столицу области, которой принадлежит гекс.
		/*!
			В случае если гекс не принадлежит области указатель равен nullptr.
		*/
		Capital * HexCapital;
	public:
		//! Деструктор.
		/*!
			Освобождает память из под юнита, который находится в гексе.
		*/
		~Hex();
		//! Конструктор.
		/*!
			/param coord1 Первая координата.
			/param coord2 Вторая координата.
			Цвет гекса по умолчанию blank.
			Все указатели по умолчанию nullptr.
		*/
		Hex(size_type coord1, size_type coord2);
		//! Метод, возвращающий копию переменной Coordinate класса. 
		Pair coordinates() const;
		//! Метод, возвращающий копию переменной Color класса. 
		hex_color color() const;
		//! Метод, возвращающий тип юнита, находящегося в гексе.
		/*!
			Если в гексе нет юнита возвращает тип none.
		*/
		unit_type get_hex_unit_type() const;
		//! Метод, возвращающий переменную HexUnit класса.
		Unit * get_hex_unit();
		//! Метод, возвращающий переменную HexCapital класса.
		Capital * get_hex_capital();
		//! Метод сообщает хранится ли юнит в гексе.
		bool occupied() const;
		//! Оператор сравнения двух объектов класса.
		/*!
			/param hex гекс, с которым сравнивается данный.
			Сравниваются переменные Coordinates двух гексов.
		*/
		bool operator == (const Hex & hex) const;	
		//! Метод, заменяющий цвет гекса на переданный.
		/*!
			/param new_color новый цвет гекса.
		*/
		void set_color(hex_color new_color);
		//! Метод, связывающий новый юнит и данный гекс.
		/*!
			/param unit указатель на юнит, с которым происходит связывание.
			Метод удаляет старый юнит гекса.
			Связывание подразумевает, что юнит и гекс хранят указатели друг на друга.
		*/
		void set_hex_unit(Unit * unit);		
		//! Метод, устанавливающий новую столицу области гекса.
		/*!
			/param new_capital указатель на гекс, по которому устанавливается новая столица области данного гекса.
			Если new_capital равен nullptr, это значение записывается в HexCapital.
			Если гекс new_capital содержит юнит столицы, HexCapital начинает указывать на него.
			Иначе HexCapital начинает указывать на столицу области гекса new_capital.
		*/
		void set_hex_capital(Hex * new_capital);
		//! Метод, убирающий юнита из гекса.
		/*!
			Переменной HexUnit присваивает значение nullptr;
		*/
		void remove_hex_unit();
		//! Метод удаляющий юнита гекса.
		/*
			Очищает память из под HexUnit и присваивает значение nullptr;
		*/
		void delete_hex_unit();
	};
	//! Оператор сравнению двух гексов.
	/*!
		/param hex1 первый гекс.
		/param hex2 второй гекс.
		Для сравнения используется оператор == объявленный в классе Hex.
	*/
	bool operator != (const Hex & hex1, const Hex & hex2);
	//! Оператор расчёта дистанции между двумя гексами.
	/*!
		/param hex1 первый гекс.
		/param hex2 второй гекс.
		Дистанция между двумя гексами есть минимальное, кол-во гексов которое нужно "пройти",
		чтобы попасть из одного в другой. 
		"Пройти" из данного гекса можно только в соседний (имеют общее ребро) ему.
		Расстояние между двумя соседними гексами равно 1.
		Расстояние между гексом и им самим равно 0.
		Формула расчёта имеет нетривиальный вид.
	*/
	size_type get_distance(const Pair & hex1, const Pair & hex2);
}
/*! @} */
