#pragma once

#include "General.h"
#include "Map.h"
#include "Player.h"
#include "Hex.h"
#include "Unit.h"
#include "View.h"

namespace game_module
{
	/*!
	\brief Класс моделирует игру.
	- Другое имя класса, используемое в докуметации - игра.
	*/
	class Game
		: public IFullAccess
	{
	private:
		/*!
		\brief Вектор указателей на игроков, участвующих в игре.
		*/
		std::vector<Player * > Players;
		/*!
		\brief Цвет игрока, совершающего ход в данный момент.
		*/
		hex_color CurrentPlayer;
		/*!
		\brief Указатель на игровую карту.
		*/
		Map * GameMap;
		/*!
		\brief Номер текущего игрового хода.
		- Следует различать игровой ход и ход игрока. 
		Один игровой ход включает в себя по одному ходу всех игроков, которые участвуют в игре.
		*/
		size_type CurrentTurn;
		/*!
		\brief Максимально возможное кол-во игровых ходов в игре.
		- Если кол-во совершённых игровых ходов достигает этого значения игра останавливается.
		*/
		size_type MaxTurns;
		/*!
		\brief Статистика игроков за игру.
		*/
		Result Results;
		/*!
		brief Указатель на игровой контроллер.
		- Контроллер содержит указатель на данный объект класса.
		- Необходим для реализации игрового API.
		*/
		Controller * GameController;
		/*!
		\brief Указатель на объект класса осуществляющий связь с сервером.
		*/
		View * GameView;
	public:
		/*!
		\brief Деструктор.
		- Очищает память из под игровой карты, контроллера и всех игроков, участвовавших в игре.
		*/
		~Game();
		/*!
		\brief Конструктор.
		- Инициализирует поля объекта класса переданными значениями.
		- Включает в игру ИИ. Если игроков слишком много удаляет лишних, 
		если слишком мало добавляет нужное кол-во внутриигровых ботов.
		- Создаёт игровую карту.
		- Карта создаётся в соответствие с желаемым типом карты, а не кол-вом игроков.
		- Если переданная переменная map_type равна "classic", создаёт карту на 4 игроков.
		- Если переданная переменная map_type равна "duel", создаёт карту на 2 игроков.
		- Если переданная переменная map_type равна "random", создаёт карту нa 2-6 игроков 
		в зависимости от значения переданной переменной players_number. Если переменая не лежит 
		в этом диапазоне значений, то карта создаётся на 6 игроков.
		- Если переданная переменная map_type не равна ни одному значению выше,
		то кидается исключение "incorect_map_type".
		- Помещает игроков на карту.

		\param max_turns Значение для поля MaxTurns объекта класса.
		\param dimension_x Кол-во строк в создаваемой карте.
		\param dimension_y Кол-во столбцов в создаваемой карте.
		\param map_type Тип создаваемой карты.
		\param players_number Желаемое кол-во игроков.
		*/
		Game(size_type max_turns, size_type dimension_x, size_type dimension_y,
			std::string map_type, size_t players_number = 6);
		/*!
		\brief Метод сообщает не закончилась ли игра.
		- Если текущий игровой ход больше максимально возможного кол-ва игровых ходов в игре
		или если кол-во игроков в игре меньше двух, игра считается завершенной и возвращается true.
		*/
		bool check_end_game() const;
		/*!
		\brief Унарный оператор возвращает указатель на гекс с переданными координатами.
		- В случае если такого гекса нет возвращает nullptr.

		\param hex Координаты требуемого к возвращению гекса.
		*/
		Hex * operator () (const Pair & hex);
		/*!
		\brief Унарный оператор возвращает указатель на гекс с переданными координатами.
		- В случае если такого гекса нет возвращает nullptr.

		\param coord1 Первая координата требуемого к возвращению гекса.
		\param coord2 Вторая координата требуемого к возвращению гекса.
		*/
		Hex * operator () (size_type coord1, size_type coord2);
		/*!
		\brief Метод возвращает указатель на юнита, находящегося в гексе с переданными координатами.
		- В случае если такого гекса нет возвращает nullptr.

		\param hex Координаты гекса, указатель на юнит которого необходимо вернуть.
		*/
		Unit * get_unit(const Pair & hex);
		/*!
		\brief Метод возвращает вектор указателей на всех игроков, участвующих в игре.
		- Возвращает поле Players объекта класса.
		*/
		std::vector<Player *> & get_players();
		/*!
		\brief Метод возвращает указатель на игрока, переданного цвета.
		- В случае если игрока такого цвета нет возвращает nullptr.

		\param seek_color Цвет игрока, указатель на которого необходимо вернуть.
		*/
		Player * get_player(hex_color seek_color);
		/*!
		\brief Метод возвращает копию поля CurrentPlayer объекта класса.
		*/
		hex_color get_current_player() const;
		/*!
		\brief Метод возвращает ссылку на полe GameMap объекта класса.
		*/
		Map & get_game_map();
		/*!
		\brief Метод возвращает поле CurrentTurn объекта класса.
		*/
		size_type current_turn() const;
		/*!
		\brief Метод возвращает поле MaxTurns объекта класса.
		*/
		size_type max_turns() const;
		/*!
		\brief Метод возвращает ссылку на поле Results объекта класса.
		*/
		Result & results();
		/*!
		\brief Метод сообщает находится ли в игре игрок переданного цвета.
		- В случае если игрока такого цвета нет, возвращает false.
		- Проверяет кол-во столиц областей игрока. Если оно равно 0 возвращает false.

		\param color Цвет игрока, которого необходимо проверить.
		*/
		bool player_in_game(hex_color color) const;
		/*!
		\brief Метод устанавливает в гекс с переданными координатами переданного юнита.

		\param hex Координаты гекса, в который необходимо установить юнит.
		\param unit Указатель на юнит, который необходимо установить в гекс.
		*/
		void set_unit(const Pair & hex, Unit * unit);
		/*!
		\brief Метод заменяет цвет гекса с переданными координатами на переданный.

		\param hex Координаты гекса, цвет которого необходимо заменить.
		\param new_color Цвет, в который необходимо покрасить гекс.
		*/
		void set_color(const Pair & hex, hex_color new_color);
		/*!
		\brief Метод сигнализирующий объекту класса, что прошел один игровой ход.
		- Инкрементирует поле CurrentTurn объекта класса.
		*/
		void turn_passed();
		/*!
		\brief Метод устанавливает в поле CurrentPlayer объекта класса переданный цвет.

		\param new_color Цвет, на который необходимо заменить значение поля CurrentPlayer объекта класса.
		*/
		void set_current_player(hex_color new_color);
		/*!
		\brief Метод устанавливает переданный цвет как цвет победителя игры.

		\param player_color Цвет игрока, победившего в данной игре.
		*/
		void set_winner(hex_color player_color);
		/*!
		\brief Метод устанавливает последний игровой ход игрока переданного цвета.

		\param player_color Цвет игрока чей последний игровой ход устанавливается.
		\param turn Номер последнего игрового хода игрока переданного цвета.
		*/
		void set_last_turn(hex_color player_color, size_type turn);
		/*!
		\brief Метод увеличивает счётчик суммарной силы всех армий, построенных игроком переданного цвета
		за игру, на переданное значение.

		\param player_color Цвет игрока чей счётчик увеличивается.
		\param number Число, на которое увеличивается счётчик игрока переданного цвета. Значение по умолчанию 1.
		*/
		void add_to_built_armies(hex_color player_color, size_type number = 1);
		/*!
		\brief Метод инкрементирует счётчик кол-ва ферм, построенных игроком переданного цвета за игру.

		\param player_color Цвет игрока чей счётчик увеличивается.
		*/
		void add_to_built_farms(hex_color player_color);
		/*!
		\brief Метод увеличивает счётчик суммарной силы всех башен, построенных игроком переданного цвета
		за игру, на переданное значение.

		\param player_color Цвет игрока чей счётчик увеличивается.
		\param number Число, на которое увеличивается счётчик игрока переданного цвета. Значение по умолчанию 2.
		*/
		void add_to_built_towers(hex_color player_color, size_type number = 2);
		/*!
		\brief Метод инкрементирует счётчик кол-ва совершенных перемещений юнитов
		игроком переданного цвета за игру.

		\param player_color Цвет игрока чей счётчик увеличивается.
		*/
		void add_to_moves(hex_color player_color);
		/*!
		\brief Метод устанавливает игроков на карту.
		- Присваивает каждому игроку столицу уже расположенную на карте, а также всех существующих соседей
		гекса, в котором находится столица.
		*/
		bool place_players();
		/*!
		\brief Метод подготавливает игрока, чей ход начался, к ходу.
		- Увеличивает денежную массу всех областей игрока согласно правилам игры.
		- Каждая обанкротившаяся область теряет все свои армии.
		- Все оставшиеся армии игрока получают возможность ходить на данном ходу.
		*/
		void prepare_player();
		/*!
		\brief Метод отвечает за размножение деревьев в конце каждого игрового хода.
		- Размножение происходит согласно игровым правилам.
		*/
		void double_trees();
		/*!
		\brief Метод возвращает цвет игрока, побеждающего на настоящий момент.
		- Если в игре осталось больше одного игрока, при подсчёте победителя учитывается
		кол-во игровых гексов, армий, ферм игроков.
		*/
		hex_color get_winner();
		/*!
		\brief Метод динамически создает ИИ и возвращает вектор с указателями на них.
		*/
		std::vector<Player *> get_bots();
		/*!
		\brief Метод динамически создает внутриигрового бота и добавляет его в игру.
		*/
		void add_bot();
		/*!
		\brief Метод проводит игру от начала до логического конца.

		\param show_map Параметр сообщает есть ли необходимость в выводе игровой карты в терминал
		каждый игровой ход. 
		Значение по умолчанию false.
		*/
		void start_game(bool show_map = false);
	};
}
