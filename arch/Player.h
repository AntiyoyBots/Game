#pragma once

#include "General.h"
#include "Controller.h"
#include "Unit.h"
#include <list>


namespace game_module
{

	class Controller;
	/*!
	\brief Класс моделирует игрока.
	- Другие имена класса, используемые в докуметации - игрок, бот, ИИ.
	*/
	class Player
	{
	private:
		/*!
		\brief Цвет игрока.
		*/
		hex_color Color;
		/*!
		\brief Имя игрока.
		*/
		std::string Name;
		/*!
		\brief Список всех координат столиц областей игрока.
		*/
		std::list<Pair> Capitals;
		/*!
		\brief Указатель на игровой котроллер.
		- Необходим для использования игрового API.
		*/
		Controller * GameController;
	public:
		/*!
		\brief Виртуальный деструктор по умолчанию.
		*/
		virtual ~Player() = default;
		/*!
		\brief Конструктор.

		\param color Цвет нового игрока.
		\param player_name Имя нового игрока.
		*/
		Player(hex_color color, const std::string & player_name);
		/*!
		\brief Метод возвращает поле Color объекта класса.
		*/
		hex_color color() const;
		/*!
		\brief Метод возвращает поле Name объекта класса.
		*/
		std::string name() const;	
		/*!
		\brief Метод возвращает кол-во столиц областей игрока.
		*/
		size_type get_capitals_number() const;
		/*!
		\brief Метод возвращает поле Capitals объекта класса.
		*/
		std::list<Pair> get_capitals() const;
		/*!
		\brief Оператор сравнения двух объектов класса.
		- Сравниваются поля Color двух игрокоа.

		\param player игрок, с которым сравнивается данный.
		*/
		bool operator == (const Player & player) const;
		/*!
		\brief Чисто виртуальный метод проводит ход игрока.
		*/
		virtual void turn() = 0;
		/*!
		\brief Метод возвращает цвет гекса с переданными координатами.
		- В случае если гекса с такими координатами нет возвращает цвет black.

		\param hex Координаты гекса, чей цвет запрашивается.
		*/
		hex_color color(const Pair & hex) const;
		/*!
		\brief Метод возвращает координаты столицы области, которой принадлежит
		гекс с переданными координатами.
		- В случае если гекса с такими координатами нет возвращает пару (0, 0).

		\param hex Координаты гекса, чья столица запрашивается.
		*/
		Pair capital(const Pair & hex) const;
		/*!
		\brief Метод возвращает дистанцию между двумя гексами.
		- Дистанция между двумя гексами есть минимальное, кол-во гексов которое нужно "пройти",
		чтобы попасть из одного в другой.
		- "Пройти" из данного гекса можно только в соседний ему.
		- Соседними гексами называются гексы имеющие общее ребро.
		- Расстояние между двумя соседними гексами равно 1, расстояние между гексом и им самим равно 0.

		\param hex1 Координаты первого гекса, для которого производится расчёт дистанции.
		\param hex2 Координаты второго гекса, для которого производится расчёт дистанции.
		*/
		size_type distance(const Pair & hex1, const Pair & hex2) const;
		/*!
		\brief Метод возвращает тип юнита, хранящегося в гексе с переданными координатами.
		- В случае если гекса с такими координатами нет возвращает тип none.

		\param hex Координаты гекса, чей тип юнита запрашивается.
		*/
		unit_type get_type(const Pair & hex) const;
		/*!
		\brief Метод возвращает силу юнита, хранящегося в гексе с переданными координатами.
		- В случае если гекса с такими координатами нет возвращает 0.

		\param hex Координаты гекса, чья сила юнита запрашивается.
		*/
		size_type get_unit_strength(const Pair & hex) const;
		/*!
		\brief Метод возвращает силу гекса с переданными координатами.
		- Сила гекса это наибольшее значение из сил юнитов, хранящихся в данном гексе или
		его соседях с тем же цветом, что и у данного гекса.
		- В случае если гекса с такими координатами нет возвращает 0.

		\param hex Координаты гекса, чья сила юнита запрашивается.
		*/
		size_type get_hex_strength(const Pair & hex) const;
		/*!
		\brief Метод возвращает поле Moved армии находящейся в гексе с переданными координатами.
		- В случае если гекса с такими координатами нет или в гекс находится не армия возвращает true.

		\param hex Координаты гекса, который хранит интересующую армию.
		*/
		bool get_moved(const Pair & hex) const;
		/*!
		\brief Метод возвращает деньги области, в которой находится гекс с переданными координатами.
		- В случае если гекса с такими координатами нет или гекс не принадлежит области возвращает 0.

		\param hex Координаты гекса, находящегося в интересующей области.
		*/
		size_type get_district_money(const Pair & hex) const;
		/*!
		\brief Метод возвращает доход области, в которой находится гекс с переданными координатами.
		- В случае если гекса с такими координатами нет или гекс не принадлежит области возвращает 0.

		\param hex Координаты гекса, находящегося в интересующей области.
		*/
		size_type get_district_income(const Pair & hex) const;
		/*!
		\brief Метод возвращает кол-во ферм области, в которой находится гекс с переданными координатами.
		- В случае если гекса с такими координатами нет или гекс не принадлежит области возвращает 0.

		\param hex Координаты гекса, находящегося в интересующей области.
		*/
		size_type get_farms_number(const Pair & hex) const;
		/*!
		\brief Метод возвращает тип игровой карты, используемой в данной игре.
		*/
		std::string get_map_type() const;
		/*!
		\brief Метод возвращает кол-во строк игровой карты, используемой в данной игре.
		*/
		size_type get_map_dimension_x() const;
		/*!
		\brief Метод возвращает кол-во столбцов игровой карты, используемой в данной игре.
		*/
		size_type get_map_dimension_y() const;
		/*!
		\brief Метод возвращает кол-во игроков, находящихся в игре.
		- Игрок находится в игре если ему принадлежит хотя бы одна столица области.
		*/
		size_type get_players_number() const;
		/*!
		\brief Метод возвращает цвета всех игроков находящихся в игре.
		- Игрок находится в игре если ему принадлежит хотя бы одна столица области.
		*/
		std::vector<hex_color> get_players_colors() const;
		/*!
		\brief Метод возвращает все координаты столиц областей игрока переданного цвета.

		\param color Цвет интересующего игрока.
		*/
		std::list<Pair> get_player_capitals(hex_color color) const;
		/*!
		\brief Метод возвращает номер текущего игрового хода.
		*/
		size_type get_current_turn() const;
		/*!
		\brief Метод возвращает максимально возможное кол-во игровых ходов в данной игре.
		*/
		size_type get_max_turns() const;
		/*!
		\brief Метод сообщает может ли юнит из гекса с переданными координатами переместиться
		в гекс с переданными координатами.
		- Поле moved армии в расчёт не принимается.

		\param hex1 Координаты гекса откуда теоретически перемещается юнит
		\param hex2 Координаты гекса куда теоретически перемещается юнит
		*/
		bool can_move(const Pair & hex1, const Pair & hex2) const;
		/*!
		\brief Метод сообщает возможно ли поместить башню на гекс с переданными координатами.
		- Если цвет гекса не совпадает с цветом текущего игрока возвращает false.

		\param hex Координаты гекса куда теоретически ставится юнит.
		*/
		bool can_place_tower(const Pair & hex) const;
		/*!
		\brief Метод сообщает возможно ли поместить ферму на гекс с переданными координатами.
		- Если цвет гекса не совпадает с цветом текущего игрока возвращает false.

		\param hex Координаты гекса куда теоретически ставится юнит.
		*/
		bool can_place_farm(const Pair & hex) const;
		/*!
		\brief Метод сообщает возможно ли поместить армию переданной силы
		на гекс с переданными координатами.
		- Если цвет гекса не совпадает с цветом текущего игрока возвращает false.

		\param hex Координаты гекса куда теоретически ставится юнит.
		\param strength Сила теоретически устанавливаемой армии.
		*/
		bool can_place_army(const Pair & hex, size_type strength = 1) const;
		/*!
		\brief Метод возвращает все гексы куда можно установить ферму в области,
		в которую входит гекс с переданными координатами.

		\param hex Координаты гекса, который находится в интересующей области.
		*/
		std::vector<Pair> hexs_to_place_farm(const Pair & hex) const;
		/*!
		\brief Метод возвращает все гексы куда можно переместить армию
		находящуюся в гексе с переданными координатами.

		\param hex Координаты гекса в который находится армия.
		*/
		std::vector<Pair> hexs_to_move_army(const Pair & hex) const;
		/*!
		\brief Метод возвращает всех юнитов переданного типа, находящихся в области,
		в которой находится гекс с переданными координатами.

		\param hex Координаты гекса, находящегося в интересующей области.
		\param type Тип юнитов, которые необходимо вернуть.
		*/
		std::vector<Pair> get_district_units(const Pair & hex, unit_type type) const;
		/*!
		\brief Метод возвращает всех статичных юнитов, находящихся в области,
		в которой находится гекс с переданными координатами.
		- Статичными юнитами считаются типы: palm, pine, grave.

		\param hex Координаты гекса, находящегося в интересующей области.
		*/
		std::vector<Pair> get_district_static(const Pair & hex) const;
		/*!
		\brief Метод возвращает все армии, находящиеся в области,
		в которой находится гекс с переданными координатами.

		\param hex Координаты гекса, находящегося в интересующей области.
		*/
		std::vector<Pair> get_army_list(const Pair & hex) const;
		/*!
		\brief Метод сообщает примыкает ли гекс с переданными координатами к какому-либо существующему гексу,
		удовлетворяющему переданным условиям.
		- Проверяется, удовлетворяет ли цвет и тип юнита соседнего гекса необходимым условиям.
		- Для проверки используются функции общего назначения (std::functional) compare1, compare2.
		- Гексы цвета black или не прошедшие проверку методом hex_exist проверке не подвергаются.
		- Если нет необходимости проверять цвета и типы юнитов гексов
		можно вызвать метод, передавая только координаты данного гекса.
		- Если есть необходимость проверять только тип юнита гекса,
		но не его цвет, то как параметр compare1 можно передать имя функции is_color.

		\param hex Координаты проверяемого гекса.
		\param compare1 Функция общего назначения, проверяющая цвет гекса.
		Значение по умолчанию функция общего назначения возращающая true.
		\param compare2 Функция общего назначения, проверяющая тип юнита гекса.
		Значение по умолчанию функция общего назначения возращающая true.
		*/
		bool get_neighbours_exist(const Pair & hex,
			std::function <bool(hex_color)> compare1 = is_color,
			std::function <bool(unit_type)> compare2 = is_type) const;
		/*!
		\brief Метод возвращает все существующие и примыкающие к гексу с переданными координатами гексы,
		удовлетворяющие переданным условиям.
		- Проверяется, удовлетворяет ли цвет и тип юнита соседнего гекса необходимым условиям.
		- Для проверки используются функции общего назначения (std::functional) compare1, compare2.
		- Гексы цвета black или не прошедшие проверку методом hex_exist
		проверке не подвергаются и не могут быть возвращены.
		- Если нет необходимости проверять цвета и типы юнитов гексов
		можно вызвать метод, передавая только координаты данного гекса.
		- Если есть необходимость проверять только тип юнита гекса, но не его цвет, то как параметр compare1 можно
		передать имя функции is_color.

		\param hex Координаты проверяемого гекса.
		\param compare1 Функция общего назначения, проверяющая цвет гекса.
		Значение по умолчанию функция общего назначения возращающая true.
		\param compare2 Функция общего назначения, проверяющая тип юнита гекса.
		Значение по умолчанию функция общего назначения возращающая true.
		*/
		std::vector<Pair> get_neighbours(const Pair & hex,
			std::function <bool(hex_color)> compare1 = is_color,
			std::function <bool(unit_type)> compare2 = is_type) const;
		/*!
		\brief Метод возвращает все существующие гексы, удовлетворяющие переданным условиям
		и находящиеся на переданом расстоянии от гекса с переданными координатами.
		- Проверяется, удовлетворяет ли цвет и тип юнита гекса необходимым условиям.
		- Для проверки используются функции общего назначения (std::functional) compare1, compare2.
		- Гексы цвета black или не прошедшие проверку методом hex_exist проверке не подвергаются и не могут быть возвращены.
		- Если нет необходимости проверять цвета и типы юнитов гексов
		можно вызвать метод, передавая только координаты данного гекса.
		- Если есть необходимость проверять только тип юнита гекса, но не его цвет, то как параметр compare1 можно
		передать имя функции is_color.

		\param hex Координаты проверяемого гекса.
		\param radius Расстояние, на котором должны находиться возвращаемые гексы от гекса с переданными координатами.
		\param compare1 Функция общего назначения, проверяющая цвет гекса.
		Значение по умолчанию функция общего назначения возращающая true.
		\param compare2 Функция общего назначения, проверяющая тип юнита гекса.
		Значение по умолчанию функция общего назначения возращающая true.
		*/
		std::vector<Pair> get_hex_row(const Pair & hex, size_type radius,
			std::function <bool(hex_color)> compare1 = is_color,
			std::function <bool(unit_type)> compare2 = is_type) const;
		/*!
		\brief Метод сообщает есть ли существующий гекс, удовлетворяющий переданным условиям
		и находящийся на переданом расстоянии от гекса с переданными координатами.
		- Проверяется, удовлетворяет ли цвет и тип юнита гекса необходимым условиям.
		- Для проверки используются функции общего назначения (std::functional) compare1, compare2.
		- Гексы цвета black или не прошедшие проверку методом hex_exist проверке не подвергаются.
		- Если нет необходимости проверять цвета и типы юнитов гексов
		можно вызвать метод, передавая только координаты данного гекса.
		- Если есть необходимость проверять только тип юнита гекса, но не его цвет, то как параметр compare1 можно
		передать имя функции is_color.

		\param hex Координаты проверяемого гекса.
		\param radius Расстояние, на котором должны находиться возвращаемые гексы от гекса с переданными координатами.
		\param compare1 Функция общего назначения, проверяющая цвет гекса.
		Значение по умолчанию функция общего назначения возращающая true.
		\param compare2 Функция общего назначения, проверяющая тип юнита гекса.
		Значение по умолчанию функция общего назначения возращающая true.
		*/
		bool get_hex_row_exist(const Pair & hex, size_type radius,
			std::function <bool(hex_color)> compare1 = is_color,
			std::function <bool(unit_type)> compare2 = is_type) const;
		/*!
		\brief Метод возвращает все гексы внутренней границы области, удовлетворяющие переданному условию
		и находящиеся в той же области что и гекс с переданными координатами.
		- Внутренней границей области считается все гексы этой области, которые имеют хотя бы одного существующего соседа
		цвета не black и не цвета владельца данной области.
		- Если гекс с переданными координатами не принадлежит области (указатель на столицу области равет nullptr),
		метод возвращает false.
		- Проверяется, удовлетворяет ли тип юнита гекса необходимым условиям.
		- Для проверки используется функция общего назначения (std::functional) compare.
		- Гексы цвета black или не прошедшие проверку методом hex_exist проверке не подвергаются и не могут быть возвращены

		\param hex Координаты проверяемого гекса.
		\param compare Функция общего назначения, проверяющая тип юнита гекса.
		Значение по умолчанию функция общего назначения возращающая true.
		*/
		std::vector<Pair> get_internal_border(const Pair & hex,
			std::function <bool(unit_type)> compare = is_type) const;
		/*!
		\brief Метод возвращает все гексы внешней границы области, удовлетворяющие переданному условию
		и находящиеся в той же области что и гекс с переданными координатами.
		- Внешней границей области считается все гексы, которые имеют хотя бы одного существующего соседа,
		принадлежащего данной области.
		- Если гекс с переданными координатами не принадлежит области (указатель на столицу области равет nullptr),
		метод возвращает false.
		- Проверяется, удовлетворяет ли тип юнита гекса необходимым условиям.
		- Гексы цвета black или не прошедшие проверку методом hex_exist проверке не подвергаются и не могут быть возвращены.
		- Если нет необходимости проверять цвета и типы юнитов гексов
		можно вызвать метод, передавая только координаты данного гекса.
		- Если есть необходимость проверять только тип юнита гекса, но не его цвет, то как параметр compare1 можно
		передать имя функции is_color.

		\param hex Координаты проверяемого гекса.
		\param compare1 Функция общего назначения, проверяющая цвет гекса.
		Значение по умолчанию функция общего назначения возращающая true.
		\param compare2 Функция общего назначения, проверяющая тип юнита гекса.
		Значение по умолчанию функция общего назначения возращающая true.
		*/
		std::vector<Pair> get_external_border(const Pair & hex,
			std::function <bool(hex_color)> compare1 = is_color,
			std::function <bool(unit_type)> compare2 = is_type) const;
		/*!
		\brief Метод возвращает все гексы области, в которую входит гекс с переданными координатами
		и которые удовлетворяют переданному условию.
		- Данный метод проверяет указатель на столицу области гекса, чтобы понять принадлежит ли он ей.
		- Метод менее затратный по сравнению с методом solve_maze.
		- Проверяется, удовлетворяет ли цвет гекса необходимым условиям.
		- Для проверки используется функция общего назначения (std::functional) compare.
		- Гексы цвета black или не прошедшие проверку методом hex_exist проверке не подвергаются и не могут быть возвращены.

		\param hex Координаты проверяемого гекса.
		\param compare Функция общего назначения, проверяющая тип юнита гекса.
		Значение по умолчанию функция общего назначения возращающая true.
		*/
		std::vector<Pair> easy_solve_maze(const Pair & hex,
			std::function <bool(unit_type)> compare = is_type) const;
		/*!
		\brief Метод возвращает кол-во гексов области, в которую входит гекс с переданными координатами
		и которые удовлетворяют переданному условию.
		- Данный метод проверяет указатель на столицу области гекса, чтобы понять принадлежит ли он ей.
		- Проверяется, удовлетворяет ли цвет и тип юнита гекса необходимым условиям.
		- Для проверки используется функция общего назначения (std::functional) compare.
		- Гексы цвета black или не прошедшие проверку методом hex_exist проверке не подвергаются и не могут быть возвращены.

		\param hex Координаты проверяемого гекса.
		\param compare Функция общего назначения, проверяющая тип юнита гекса.
		Значение по умолчанию функция общего назначения возращающая true.
		*/
		size_type easy_solve_maze_count(const Pair & hex,
			std::function <bool(unit_type)> compare = is_type) const;
		/*!
		\brief Метод возвращает цену покупки фермы в области,
		в которую входит гекс с переданными координатами.

		\param hex Координаты гекса, находящегося в интересующей области.
		*/
		size_type get_farm_cost(const Pair & hex) const;
		/*!
		\brief Метод возвращает цену покупки армии переданной силы.
		- Если переданная сила имеет неприемлемое значение возвращает 0.

		\param strength Сила армии, цена покупки которой необходима.
		Значение по умолчанию 1.
		*/
		size_type get_army_cost(size_type strength = 1) const;
		/*!
		\brief Метод возвращает цену покупки башни переданной силы.
		- Если переданная сила имеет неприемлемое значение возвращает 0.

		\param strength Сила башни, цена покупки которой необходима.
		Значение по умолчанию 2.
		*/
		size_type get_tower_cost(size_type strength = 2) const;
		/*!
		\brief Метод совершает перемещение армии находящейся в гексе с переданными координатами
		в гекс с переданными координатами если это возможно.
		- Метод возвращает true если перемещение было совершенно.
		- Если цвет гекса, откуда происходит перемещение, не совпадает с цветом ходящегося сейчас игрока
		возвращает false.

		\param start Координаты гекса откуда происходит перемещение.
		\param end Координаты гекса куда происходит перемещение.
		*/
		bool make_move(const Pair & start, const Pair & end);
		/*!
		\brief Метод устанавливает новую башню переданной силы в гекс с переданными координатами,
		если это возможно.
		- Метод возвращает true если установка была совершенна.
		- Если цвет гекса, куда происходит установка юнита, не совпадает с цветом ходящегося сейчас игрока
		возвращает false.

		\param hex Координаты гекса куда устанавливается новый юнит.
		\param strength Сила башни, требуемой к покупке.
		Значение по умолчанию 2.
		*/
		bool buy_tower(const Pair & hex, size_type strength = 2);
		/*!
		\brief Метод устанавливает новую ферму в гекс с переданными координатами,
		если это возможно.
		- Метод возвращает true если установка была совершенна.
		- Если цвет гекса, куда происходит установка юнита, не совпадает с цветом ходящегося сейчас игрока
		возвращает false.

		\param hex Координаты гекса куда устанавливается новый юнит.
		*/
		bool buy_farm(const Pair & hex);
		/*!
		\brief Метод устанавливает новую армию переданной силы в гекс с переданными координатами,
		если это возможно.
		- Метод возвращает true если установка была совершенна.
		- Если цвет гекса, куда происходит установка юнита, не совпадает с цветом ходящегося сейчас игрока
		возвращает false.

		\param hex Координаты гекса куда устанавливается новый юнит.
		\param strength Сила армии, требуемой к покупке.
		Значение по умолчанию 1.
		*/
		bool buy_army(const Pair & hex, size_type strength = 1);
	private:
		/*!
		\brief Метод добавляет к списку координат столиц областей переданные координаты.
		
		\param capital Координаты новой столицы области.
		*/
		void add_capital(const Pair & capital);
		/*!
		\brief Метод исключает из списка координат столиц областей переданные координаты.

		\param capital Координаты столицы, которые надо исключить из списка  координат столиц областей.
		*/
		bool remove_capital(const Pair & capital);
		/*!
		\brief Метод инициализирует поле Controller объекта класса переданным значением.

		\param controller Значение для инициализации.
		*/
		void set_controller(Controller * controller);
		friend class Game;
		friend class Controller;
	};
	/*!
	\brief Оператор сравнения двух игроков.
	- Используется оператор сравнения структуры Player.

	\param player1 Первый игрок, проходящий сравнение.
	\param player2 Второй игрок, проходящий сравнение.
	*/
	bool operator != (const Player & player1, const Player & player2);
}
