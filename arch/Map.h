#pragma once

#include "General.h"
#include "Hex.h"
#include <set>
#include <functional>


namespace game_module
{
	/*!
	\brief Класс моделирует игровое поле.
	- Другие имена класса, используемые в докуметации - карта, игровая карта.
	- Все гексы игровой карты ориентированы так, что одна из осей симметрии гекса вертикальна и проходит через две его вершины.
	- Ячейка a "примыкает" к ячейке b если их геометрические воплощения имеют общее ребро. Это соотношение симметрично,
	если a примыкает к b, то b примыкает к a.
	- Ячейки расположены построчно по n штук в строке. Каждый нечетный элемент строки i примыкает своими левым и правым рёбрами 
	к элементам данной строки с номерами i - 1 и i + 1 соответственно.
	- Первый элемент каждой нечётной строки n примыкает своими левым верхним и левым нижним ребрами к правому нижнему 
	и правому верхнему рёбрам первых элементов строк с номерами n - 1 и n + 1 соответственно.
	- В столбец с номером i входит каждый гекс, который располагается на i позиции в своей строке.
	*/
	class Map
	{
	private:
		/*!
		\brief Указатель на двумерный массив ячеек игрового поля.
		*/
		Hex *** Root;
		/*!
		\brief Кол-во строк игровой карты.
		- Значение этого поля всегда нечётно. Дополнительная информация в описании метода generate_map данного класса.
		*/
		size_type DimensionX;
		/*!
		\brief Кол-во столбцов игровой карты.
		- Значение этого поля всегда нечётно. Дополнительная информация в описании метода generate_map данного класса.
		*/
		size_type DimensionY;
		/*!
		\brief Тип карты.
		- Это значение используется в методе generate_map данного класса.
		*/
		std::string MapType;
	public:
		/*!
		\brief Деструктор.
		- Вызвается метод clear для объекта класса.
		*/
		~Map();
		/*!
		\brief Конструктор.
		- Внутри вызывается метод generate_map класса.

		\param dimension_x Значение для инициализации поля DimensionX карты.
		Значение по умолчанию 19.
		\param dimension_y Значение для инициализации поля DimensionY карты.
		Значение по умолчанию 19.
		\param player_number Ожидаемое кол-во столиц на карте.
		Значение по умолчанию 4.
		\param map_type Значение для инициализации поля MapType карты.
		Значение по умолчанию "classic".
		*/
		Map(size_type dimension_x = 19,
			size_type dimension_y = 19,
			size_type player_number = 4,
			const std::string & map_type = "classic");
		/*!
		\brief Метод возвращает поле DimensionX объекта класса.
		*/
		size_type dimension_x() const;
		/*!
		\brief Метод возвращает поле DimensionY объекта класса.
		*/
		size_type dimension_y() const;
		/*!
		\brief Метод возвращает поле MapType объекта класса.
		*/
		std::string map_type() const;
		/*!
		\brief Унарный оператор возвращает указатель на гекс с переданными координатами.
		- В случае если такого гекса нет возвращает nullptr.

		\param hex Координаты требуемого к возвращению гекса.
		*/
		Hex * operator () (const Pair & hex) const;
		/*!
		\brief Унарный оператор возвращает указатель на гекс с переданными координатами.
		- В случае если гекса с такими координатами нет возвращает nullptr.

		\param coord1 Первая координата требуемого к возвращению гекса.
		\param coord2 Вторая координата требуемого к возвращению гекса.
		*/
		Hex * operator () (size_type coord1, size_type coord2) const;
		/*!
		\brief Метод возвращает цвет гекса с переданными координатами.
		- В случае если гекса с такими координатами нет возвращает цвет black.

		\param hex Координаты гекса, чей цвет запрашивается.
		*/
		hex_color color(const Pair & hex) const;
		/*!
		\brief Метод возвращает тип юнита, хранящегося в гексе с переданными координатами.
		- В случае если гекса с такими координатами нет возвращает тип none.

		\param hex Координаты гекса, чей тип юнита запрашивается.
		*/
		unit_type type(const Pair & hex) const;
		/*!
		\brief Метод сообщает содержится ли гекс с передаными координатами в карте.

		\param hex Координаты гекса, существование которого необходимо проверить.
		*/
		bool hex_exist(const Pair & hex) const;
		/*!
		\brief Метод очищает память из под гексов.
		- Освобождает память из под всех гексов, хранящихся в поле Root.
		- После вызова метода объект продолжает существовать, но обращение к его гексам недопустимо.
		*/
		void clear();
		/*!
		\brief Метод сообщает примыкает ли гекс с переданными координатами
		к какому-либо существующему гексу, удовлетворяющему переданным условиям.
		- Проверяется, удовлетворяет ли цвет и тип юнита соседнего гекса необходимым условиям.
		- Для проверки используются функции общего назначения (std::functional) compare1, compare2.
		- Гексы цвета black или не прошедшие проверку методом hex_exist проверке не подвергаются.
		- Если нет необходимости проверять цвета и типы юнитов гексов
		можно вызвать метод, передавая только координаты данного гекса.
		- Если есть необходимость проверять только тип юнита гекса, но не его цвет,
		то как параметр compare1 можно передать имя функции is_color.

		\param coord1 Первая координата проверяемого гекса.
		\param coord2 Вторая координата проверяемого гекса.
		\param compare1 Функция общего назначения, проверяющая цвет гекса.
		Значение по умолчанию функция общего назначения, возращающая true.
		\param compare2 Функция общего назначения, проверяющая тип юнита гекса.
		Значение по умолчанию функция общего назначения, возращающая true.
		*/
		bool get_neighbours_exist(size_type coord1, size_type coord2,
			std::function <bool(hex_color)> compare1 = is_color,
			std::function <bool(unit_type)> compare2 = is_type) const;
		/*!
		\brief Метод сообщает примыкает ли гекс с переданными координатами к какому-либо существующему гексу,
		удовлетворяющему переданным условиям.
		- Проверяется, удовлетворяет ли цвет и тип юнита соседнего гекса необходимым условиям.
		- Для проверки используются функции общего назначения (std::functional) compare1, compare2.
		- Гексы цвета black или не прошедшие проверку методом hex_exist проверке не подвергаются.
		- Если нет необходимости проверять цвета и типы юнитов гексов
		можно вызвать метод, передавая только координаты данного гекса.
		- Если есть необходимость проверять только тип юнита гекса, но не его цвет, то как параметр compare1 можно
		передать имя функции is_color.

		\param hex Координаты проверяемого гекса.
		\param compare1 Функция общего назначения, проверяющая цвет гекса.
		Значение по умолчанию функция общего назначения, возращающая true.
		\param compare2 Функция общего назначения, проверяющая тип юнита гекса.
		Значение по умолчанию функция общего назначения, возращающая true.
		*/
		bool get_neighbours_exist(const Pair & hex,
			std::function <bool(hex_color)> compare1 = is_color,
			std::function <bool(unit_type)> compare2 = is_type) const;
		/*!
		\brief Метод возвращает все существующие и примыкающие к гексу с переданными координатами гексы,
		удовлетворяющие переданным условиям.
		- Проверяется, удовлетворяет ли цвет и тип юнита соседнего гекса необходимым условиям.
		- Для проверки используются функции общего назначения (std::functional) compare1, compare2.
		- Гексы цвета black (если передаваемая переменная return_black равна false)
		или не прошедшие проверку методом hex_exist проверке не подвергаются и не могут быть возвращены.
		- Если нет необходимости проверять цвета и типы юнитов гексов
		можно вызвать метод, передавая только координаты данного гекса.
		- Если есть необходимость проверять только тип юнита гекса, но не его цвет, то как параметр compare1 можно
		передать имя функции is_color.
		- Если есть необходимость получить всех существующих соседей гекса не проверяя их цвета
		и типы их юнитов, то как параметр compare1 можно передать имя функции is_color,
		как параметр compare2 передать имя функции is_type, как параметр return_black передать true.


		\param coord1 Первая координата проверяемого гекса.
		\param coord2 Вторая координата проверяемого гекса.
		\param compare1 Функция общего назначения, проверяющая цвет гекса.
		Значение по умолчанию функция общего назначения, возращающая true.
		\param compare2 Функция общего назначения, проверяющая тип юнита гекса.
		Значение по умолчанию функция общего назначения, возращающая true.
		\param return_black Переменная сообщает необходимо ли возвращать соседей цвета black.
		Значение по умолчанию false.
		*/
		std::vector<Pair> get_neighbours(size_type coord1, size_type coord2,
			std::function <bool(hex_color)> compare1 = is_color,
			std::function <bool(unit_type)> compare2 = is_type,
			bool return_black = false) const;
		/*!
		\brief Метод возвращает все существующие и примыкающие к гексу с переданными координатами гексы,
		удовлетворяющие переданным условиям.
		- Проверяется, удовлетворяет ли цвет и тип юнита соседнего гекса необходимым условиям.
		- Для проверки используются функции общего назначения (std::functional) compare1, compare2.
		- Гексы цвета black (если передаваемая переменная return_black равна false)
		или не прошедшие проверку методом hex_exist проверке не подвергаются и не могут быть возвращены.
		- Если нет необходимости проверять цвета и типы юнитов гексов
		можно вызвать метод, передавая только координаты данного гекса.
		- Если есть необходимость проверять только тип юнита гекса, но не его цвет, то как параметр compare1 можно
		передать имя функции is_color.
		- Если есть необходимость получить всех существующих соседей гекса не проверяя их цвета
		и типы их юнитов, то как параметр compare1 можно передать имя функции is_color,
		как параметр compare2 передать имя функции is_type, как параметр return_black передать true.

		\param hex Координаты проверяемого гекса.
		\param compare1 Функция общего назначения, проверяющая цвет гекса.
		Значение по умолчанию функция общего назначения, возращающая true.
		\param compare2 Функция общего назначения, проверяющая тип юнита гекса.
		Значение по умолчанию функция общего назначения, возращающая true.
		\param return_black Переменная сообщает необходимо ли возвращать соседей цвета black.
		Значение по умолчанию false.
		*/
		std::vector<Pair> get_neighbours(const Pair & hex,
			std::function <bool(hex_color)> compare1 = is_color,
			std::function <bool(unit_type)> compare2 = is_type,
			bool return_black = false) const;
		/*!
		\brief Метод возвращает все существующие гексы, удовлетворяющие переданным условиям 
		и находящиеся на переданом расстоянии от гекса с переданными координатами.
		- Проверяется, удовлетворяет ли цвет и тип юнита гекса необходимым условиям.
		- Для проверки используются функции общего назначения (std::functional) compare1, compare2.
		- Гексы цвета black или не прошедшие проверку методом hex_exist проверке не подвергаются
		и не могут быть возвращены.
		- Если нет необходимости проверять цвета и типы юнитов гексов
		можно вызвать метод, передавая только координаты данного гекса.
		- Если есть необходимость проверять только тип юнита гекса, но не его цвет,
		то как параметр compare1 можно передать имя функции is_color.

		\param hex Координаты проверяемого гекса.
		\param radius Расстояние, на котором должны находиться возвращаемые гексы
		от гекса с переданными координатами.
		\param compare1 Функция общего назначения, проверяющая цвет гекса.
		Значение по умолчанию функция общего назначения, возращающая true.
		\param compare2 Функция общего назначения, проверяющая тип юнита гекса.
		Значение по умолчанию функция общего назначения, возращающая true.
		*/
		std::vector<Pair> get_hex_row(const Pair & hex, size_type radius,
			std::function <bool(hex_color)> compare1 = is_color,
			std::function <bool(unit_type)> compare2 = is_type) const;
		/*!
		\brief Метод сообщает есть ли существующий гекс, удовлетворяющий переданным условиям
		и находящийся на переданом расстоянии от гекса с переданными координатами.
		- Проверяется, удовлетворяет ли цвет и тип юнита гекса необходимым условиям.
		- Для проверки используются функции общего назначения (std::functional) compare1, compare2.
		- Гексы цвета black или не прошедшие проверку методом hex_exist проверке не подвергаются.
		- Если нет необходимости проверять цвета и типы юнитов гексов
		можно вызвать метод, передавая только координаты данного гекса.
		- Если есть необходимость проверять только тип юнита гекса, но не его цвет,
		то как параметр compare1 можно передать имя функции is_color.

		\param hex Координаты проверяемого гекса.
		\param radius Расстояние, на котором должны находиться возвращаемые гексы
		от гекса с переданными координатами.
		\param compare1 Функция общего назначения, проверяющая цвет гекса.
		Значение по умолчанию функция общего назначения, возращающая true.
		\param compare2 Функция общего назначения, проверяющая тип юнита гекса.
		Значение по умолчанию функция общего назначения, возращающая true.
		*/
		bool get_hex_row_exist(const Pair & hex, size_type radius,
			std::function <bool(hex_color)> compare1 = is_color,
			std::function <bool(unit_type)> compare2 = is_type) const;
		/*!
		\brief Метод возвращает все гексы внутренней границы области, удовлетворяющие переданному условию
		и находящиеся в той же области что и гекс с переданными координатами.
		- Внутренней границей области считается все гексы этой области, которые имеют хотя бы
		одного существующего соседа цвета не black и не цвета владельца данной области.
		- Если гекс с переданными координатами не принадлежит области 
		(указатель на столицу области равет nullptr), метод возвращает false.
		- Проверяется, удовлетворяет ли тип юнита гекса необходимым условиям.
		- Для проверки используется функция общего назначения (std::functional) compare.
		- Гексы цвета black или не прошедшие проверку методом hex_exist проверке не подвергаются
		и не могут быть возвращены

		\param hex Координаты проверяемого гекса.
		\param compare Функция общего назначения, проверяющая тип юнита гекса.
		Значение по умолчанию функция общего назначения, возращающая true.
		*/
		std::vector<Pair> get_internal_border(const Pair & hex,
			std::function <bool(unit_type)> compare = is_type) const;
		/*!
		\brief Метод возвращает все гексы внешней границы области, удовлетворяющие переданному условию
		и находящиеся в той же области что и гекс с переданными координатами.
		- Внешней границей области считается все гексы, которые имеют
		хотя бы одного существующего соседа, принадлежащего данной области.
		- Если гекс с переданными координатами не принадлежит области
		(указатель на столицу области равет nullptr), метод возвращает false.
		- Проверяется, удовлетворяет ли тип юнита гекса необходимым условиям.
		- Гексы цвета black или не прошедшие проверку методом hex_exist проверке не подвергаются
		и не могут быть возвращены.
		- Если нет необходимости проверять цвета и типы юнитов гексов
		можно вызвать метод, передавая только координаты данного гекса.
		- Если есть необходимость проверять только тип юнита гекса, но не его цвет,
		то как параметр compare1 можно передать имя функции is_color.

		\param hex Координаты проверяемого гекса.
		\param compare1 Функция общего назначения, проверяющая цвет гекса.
		Значение по умолчанию функция общего назначения, возращающая true.
		\param compare2 Функция общего назначения, проверяющая тип юнита гекса.
		Значение по умолчанию функция общего назначения, возращающая true.
		*/
		std::vector<Pair> get_external_border(const Pair & hex,
			std::function <bool(hex_color)> compare1 = is_color,
			std::function <bool(unit_type)> compare2 = is_type) const;
		/*!
		\brief Метод возвращает все гексы области, в которую входит гекс с переданными координатами
		и которые удовлетворяют переданному условию.
		- Данный метод проверяет указатель на столицу области гекса, чтобы понять принадлежит ли он ей.
		- Метод менее затратный по сравнению с методом solve_maze.
		- Проверяется, удовлетворяет ли цвет гекса необходимым условиям.
		- Для проверки используется функция общего назначения (std::functional) compare.
		- Гексы цвета black или не прошедшие проверку методом hex_exist проверке не подвергаются
		и не могут быть возвращены.

		\param hex Координаты проверяемого гекса.
		\param compare Функция общего назначения, проверяющая тип юнита гекса.
		Значение по умолчанию функция общего назначения возращающая, true.
		*/
		std::vector<Pair> easy_solve_maze(const Pair & hex,
			std::function <bool(unit_type)> compare = is_type) const;
		/*!
		\brief Метод возвращает кол-во гексов области, в которую входит гекс с переданными координатами
		и которые удовлетворяют переданному условию.
		- Данный метод проверяет указатель на столицу области гекса, чтобы понять принадлежит ли он ей.
		- Проверяется, удовлетворяет ли цвет и тип юнита гекса необходимым условиям.
		- Для проверки используется функция общего назначения (std::functional) compare.
		- Гексы цвета black или не прошедшие проверку методом hex_exist проверке не подвергаются
		и не могут быть возвращены.

		\param hex Координаты проверяемого гекса.
		\param compare Функция общего назначения, проверяющая тип юнита гекса.
		Значение по умолчанию функция общего назначения, возращающая true.
		*/
		size_type easy_solve_maze_count(const Pair & hex,
			std::function <bool(unit_type)> compare = is_type) const;
		/*!
		\brief Метод возвращает все гексы области, в которую входит гекс с переданными координатами.
		- Данный метод не проверяет указатель на столицу области гекса, чтобы понять принадлежит ли он ей.
		- Метод более затратный по сравнению с методом easy_solve_maze.

		\param hex Координаты проверяемого гекса.
		*/
		std::vector<Pair> solve_maze(const Pair & hex);
	private:
		/*!
		\brief Метод генерирует карту.
		- Метод использует значение полей MapType, DimensionX,  DimensionY для генерации.
		- Значения полей DimensionX, DimensionY заменяются на нечётные
		для более удобного чтения карты пользователями.
		- Если поле MapType равно "classic", то создаётся карта с кол-вом строк и столбцов не меньше 11.
		На поле располагается 4 столицы симметрично относительно центра карты в гексе с координатами 
		(DimensionX / 2, DimensionY / 2), одна из столиц имеет координаты (3, 3).
		Все гексы, располагающиеся по краям карты имеют цвет black, остальные цвет blank.
		- Если поле MapType равно "duel", то создаётся карта с кол-вом строк и столбцов не меньше 11.
		На поле располагается 2 столицы с координатами (DimensionX / 2, 3)
		и (DimensionX / 2, DimensionY - 4). 
		Все гексы, располагающиеся по краям карты имеют цвет black, остальные цвет blank.
		- Если поле MapType равно "random", то создаётся карта с кол-вом строк и столбцов не меньше 17.
		На поле случайно располагается от 2 до 6 столиц. Кол-во столиц равно значению
		переданного параметра player_number.
		Все гексы, располагающиеся по краям карты имеют цвет black.
		Также около 40% гексов на карте имеют цвет blank (они выбираются относительно случайно),
		остальные гексы имеют цвет black.
		Алгоритм выбора гексов с цветом blank обеспечивает достаточно высокую их концентрацию
		около центра карты.

		\param player_number Кол-во игроков в игре, для которых нужно разместить столицы.
		*/
		void generate_map(size_type player_number = 4);
		/*!
		\brief Метод сообщает удовлетворяет ли гекс с переданными координатами переданным условиям.
		- Проверяется, удовлетворяет ли тип юнита гекса необходимым условиям.
		- Гексы цвета black или не прошедшие проверку методом hex_exist проверке не подвергаются
		и не могут быть возвращены.
		- Если нет необходимости проверять цвета и типы юнитов гексов
		можно вызвать метод, передавая только координаты данного гекса.
		- Если есть необходимость проверять только тип юнита гекса, но не его цвет,
		то как параметр compare1 можно передать имя функции is_color.

		\param hex Координаты проверяемого гекса.
		\param compare1 Функция общего назначения, проверяющая цвет гекса.
		\param compare2 Функция общего назначения, проверяющая тип юнита гекса.
		\param return_black Переменная сообщает необходимо ли возвращать учитывать гекс цвета black.
		Значение по умолчанию false.
		*/
		bool hex_acceptable(const Pair & hex,
		std::function <bool(hex_color)> compare1,
		std::function <bool(unit_type)> compare2,
		bool return_black = false) const;
	};
	/*!
	\brief Структура моделирует упрощенное игровое поля.
	- Используется в методе solve_maze класса Map.
	*/
	struct HexImpress
	{
		/*!
		\brief Координаты гекса.
		*/
		Pair Coordinates;
		/*!
		\brief! Цвет гекса.
		*/
		hex_color Color;
		/*!
		\brief! Тип юнита, находящегося в гексе.
		*/
		unit_type UnitType;
		/*!
		\brief Конструктор.

		\param hex Гекс, который надо перевести в его упрощенную форму.
		*/
		HexImpress(const Hex & hex);
	};
	/*!
	\brief Структура моделирует упрощенную ячейку игрового поля.
	- Используется в методе solve_maze класса Map.
	*/
	struct MapImpress
	{
		/*!
		\brief Указатель на двумерный массив упрощенных ячеек игрового поля.
		*/
		HexImpress *** Root;
		/*!
		\brief Кол-во строк карты.
		*/
		size_type DimensionX;
		/*!
		\brief Кол-во столбцов карты.
		*/
		size_type DimensionY;
		/*!
		\brief Деструктор.
		*/
		~MapImpress();
		/*!
		\brief Конструктор.

		\param map Карта которую надо перевести в её упрощенную форму.
		*/
		MapImpress(const Map & map);
		/*!
		\brief Унарный оператор возвращает указатель на гекс с переданными координатами.
		- В случае если гекса с такими координатами нет возвращает nullptr.

		\param hex Координаты требуемого к возвращению гекса.
		*/
		HexImpress * operator () (const Pair & hex);
	};
}
