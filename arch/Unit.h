#pragma once
#include "Hex.h"


namespace game_module
{
	class Hex;
	/*!
	\brief Абстрактный класс моделирует игрового юнита.
	- Другое имя класса и всех его производных, используемое в докуметации - юнит.
	*/
	class Unit
	{
	protected:
		/*!
		\brief Указатель на гекс, в котором хранится данный юнит.
		*/
		Hex * Field;
	public:
		/*!
		\brief Виртуальный деструктор по умолчанию.
		*/
		virtual ~Unit() = default;
		/*!
		\brief Конструктор

		\param hex Значение для инициализации поля Field юнита.
		*/
		Unit(Hex * hex);
		/*!
		\brief Метод возвращает координаты гекса, в котором хранится юнит.
		*/
		Pair coordinates() const;
		/*!
		\brief Метод возвращает цвет гекса, в котором хранится юнит.
		- Цвет гекса совпадает с цветом владельца юнита.
		*/
		hex_color color() const;
		/*! 
		\brief Чисто виртуальный метод возвращает силу юнита.
		- Сила юнита целое неотрицательное число.
		- Сила юнита характеризует его способность "защищаться" от других юнитов или "атаковать" их,
		чем выше сила, тем успешнее данные действия.
		*/
		virtual size_type strength() const = 0;
		/*!
		\brief Чисто виртуальный метод возвращает тип юнита.
		*/
		virtual unit_type type() const = 0; 
		/*!
		\brief Чисто виртуальный метод возвращает условную ценность юнита.
		- Метод полезен только во внутреннем коде.
		*/
		virtual size_type cost() const = 0;
		/*!
		\brief Метод устанавливает новый гекс, в котором будет хранится юнит.
		- Метод производит одностороннее связывание с гексом.

		\param hex Указатель на новый гекс, в котором будет храниться юнит.
		*/
		void set_hex(Hex * hex);
	};
	/*!
	\brief Функция создаёт юнита переданного типа.
	- Переданный параметр strength учитывается только при создании юнита типа army или tower.
	Если переданный параметр недопустим, функция вернет nullptr.

	\param type Требуемый тип юнита.
	\param strength Сила юнита, которого необходима создать. Значение по умолчанию 0.
	*/
	Unit * unit_factory(unit_type type, size_type strength = 0);
	/*!
	\brief Класс, от которого наследуются классы юнитов имеющих ненулевой параметр силы.
	- Объекты данного класса в проекте не создаются.
	*/
	class ActiveUnit
		: public Unit
	{
	protected:
		/*!
		\brief Сила юнита.
		*/
		size_type Strength;
	public:
		/*!
		\brief Виртуальный деструктор по умолчанию.
		*/
		virtual ~ActiveUnit() = default;
		/*!
		\brief Конструктор.
		
		\param hex Значение для инициализации поля Field юнита.
		\param strength Значение для инициализации поля Strength юнита.
		*/
		ActiveUnit(Hex * hex, size_type strength);
		/*!
		\brief Метод возвращает поле Strength объекта класса.
		*/
		size_type strength() const;
	};
	/*!
	\brief Класс моделирует юнит "армия".
	- Другое имя класса, используемое в докуметации - армия.
	- Армия может перемещаться по игровому полю.
	*/
	class Army
		: public ActiveUnit
	{
	private:
		/*!
		\brief Поле сообщает может ли юнит перемещаться в данный ход.
		- Информация актуальна только в ход владельца гекса, в котором находится данный юнит.
		*/
		bool Moved;
	public:
		/*!
		\brief Деструктор по умолчанию.
		*/
		~Army() = default;
		/*!
		\brief Конструктор.

		\param hex Значение для инициализации поля Field юнита.
		\param strength Значение для инициализации поля Strength юнита.
		*/
		Army(Hex * hex, size_type strength);
		/*!
		\brief Метод возвращает тип юнита.
		*/
		unit_type type() const;	
		/*!
		\brief Метод возвращает условную ценность юнита.
		*/
		size_type cost() const;
		/*!
		\brief Статический метод возвращает сумму денег, которые юнит добавляет к казне области каждый ход
		его владельца.
		- Данный метод возвращает отрицательное значение.
		- Если переданное значение силы юнита недопустимо возвращает 0.

		\param strength Сила юнита, для которой расчитывается его вклад в казну области.
		*/
		static size_type income(size_type strength);
		/*!
		\brief Метод возвращает поле Moved объекта класса. 
		*/
		bool moved() const;
		/*!
		\brief Статический метод возвращает кол-во "очков перемещения", которые необходимы для перемещения юнита.
		*/
		static size_type move_points();
		/*!
		\brief Метод устанавливает новую силу юнита.

		\param strength Новая сила юнита.
		*/
		void set_strength(size_type strength);
		/*!
		\brief Метод устанавливает новое значение в поле Moved юнита.

		\param moved Новое значение поля Moved объекта класса.
		*/
		void set_moved(bool moved);
		/*!
		\brief Метод "умерщвляет" армию.
		- Удаляет армию и создаёт в гексе, в котором она находилась, юнит типа grave. 
		*/
		void die();
	};
	/*!
	\brief Класс моделирует юнит "башня".
	- Другое имя класса, используемое в докуметации - башня.
	*/
	struct Tower
		: public ActiveUnit
	{
		/*!
		\brief Деструктор по умолчанию.
		*/
		~Tower() = default;
		/*!
		\brief Конструктор.

		\param hex Значение для инициализации поля Field юнита.
		\param strength Значение для инициализации поля Strength юнита.
		*/
		Tower(Hex * hex, size_type strength);
		/*!
		\brief Метод возвращает тип юнита.
		*/
		unit_type type() const;
		/*!
		\brief Метод возвращает условную ценность юнита.
		*/
		size_type cost() const;
		/*!
		\brief Статический метод возвращает сумму денег, которые юнит добавляет к казне области каждый ход
		его владельца.
		- Данный метод возвращает отрицательное значение.
		- Если переданное значение силы юнита недопустимо возвращает 0.

		\param strength Сила юнита, для которой расчитывается его вклад в казну области.
		*/
		static size_type income(size_type strength);
	};
	/*!
	\brief Класс моделирует юнит "столица".
	- Другое имя класса, используемое в докуметации - столица.
	- Столица является условным центром области. 
	Областью считаем все связные с гексом столицы гексы, имеющие того же владельца, что и она.
	*/
	class Capital
		: public ActiveUnit
	{
	private:
		/*!
		\brief Кол-во денег области.
		- Другое имя поля, используемое в докуметации - казна.
		*/
		size_type DistrictMoney;
		/*!
		\brief Кол-во денег, которое получает казна области сразу перед началом хода её владельца. 
		- Другое имя поля, используемое в докуметации - доход области.
		*/
		size_type DistrictIncome;
		/*!
		\brief Кол-во ферм, находящихся в области
		*/
		size_type FarmsNumber;
	public:
		/*!
		\brief Деструктор по умолчанию.
		*/
		~Capital() = default;
		/*!
		\brief Конструктор.
		- Поля DistrictMoney, DistrictIncome, FarmsNumber объекта класса инициализируются значением 0.

		\param hex Значение для инициализации поля Field юнита.
		*/
		Capital(Hex * hex);
		/*!
		\brief Метод возвращает тип юнита.
		*/
		unit_type type() const;
		/*!
		\brief Метод возвращает условную ценность юнита.
		*/
		size_type cost() const;
		/*!
		\brief Метод возвращает поле DistrictMoney объекта класса.
		*/
		size_type district_money() const;
		/*!
		\brief Метод возвращает поле DistrictIncome объекта класса.
		*/
		size_type district_income() const;
		/*!
		\brief Метод возвращает поле FarmsNumber объекта класса.
		*/
		size_type farms_number() const;
		/*!
		\brief Метод увеличивает казну на переданное значение.
		- Если после увеличения казна хранит отрицательное значение, то она обнуляется и метод возвращает false.
		Если метод возвращает false, то считается, что область обанкротилась.

		\param money Значение, на которое увеличивается казна области.
		*/
		bool change_district_money(size_type money);
		/*!
		\brief Метод увеличивает доход области на переданное значение.

		\param income Значение, на которое увеличивается доход области.
		*/
		void change_district_income(size_type income);
		/*!
		\brief Метод изменяет доход области так, как если бы она потеряла переданный гекс.
		- Если переданный гекс не принадлжет области с данной столицей, то доход области не меняется.

		\param hex Условно потерянный гекс области.
		*/
		void change_district_income(Hex * hex);
		/*!
		\brief Метод увеличивает кол-во ферм области на переданное значение.

		\param number Значение, на которое увеличивается кол-во ферм области.
		Значение по умолчанию 1.
		*/
		void change_farms_number(size_type number = 1);
	};
	/*!
	\brief Класс, от которого наследуются классы юнитов, имеющих нулевой параметр силы.
	- Объекты данного класса в проекте не создаются.
	*/
	struct PassiveUnit
		:public Unit
	{
		/*!
		\brief Деструктор по умолчанию.
		*/
		virtual ~PassiveUnit() = default;
		/*!
		\brief Конструктор.

		\param hex Значение для инициализации поля Field юнита.
		*/
		PassiveUnit(Hex * hex);
		/*!
		\brief Метод возвращает 0.
		*/
		size_type strength() const;
	};
	/*!
	\brief Класс моделирует юнит "ферма".
	- Другое имя класса, используемое в докуметации - ферма.
	*/
	struct Farm
		: public PassiveUnit
	{
		/*!
		\brief Деструктор по умолчанию.
		*/
		~Farm() = default;
		/*!
		\brief Конструктор.

		\param hex Значение для инициализации поля Field юнита.
		*/
		Farm(Hex * hex);
		/*!
		\brief Метод возвращает тип юнита.
		*/
		unit_type type() const;
		/*!
		\brief Метод возвращает условную ценность юнита.
		*/
		size_type cost() const;
		/*!
		\brief Статический метод возвращает сумму денег, которые юнит добавляет к казне области каждый ход
		его владельца.
		- Данный метод возвращает положительное значение.
		*/
		static size_type income();
	};
	/*!
	\brief Абстрактный класс, от которого наследуются классы юнитов, имеющих условный тип деревьев.
	- Другое имя класса и всех его производных, используемое в докуметации - дерево.
	*/
	class Tree
		: public PassiveUnit
	{
	protected:
		/*!
		\brief Кол-во ходов необходимое дереву для размножения.
		*/
		size_type TurnsFromDouble;
	public:
		/*!
		\brief Деструктор по умолчанию.
		*/
		virtual ~Tree() = default;
		/*!
		\brief Конструктор.
		- Поле TurnsFromDouble объекта класса инициализируется 0.

		\param hex Значение для инициализации поля Field юнита.
		*/
		Tree(Hex * hex);
		/*!
		\brief Метод возвращает условную ценность юнита.
		*/
		size_type cost() const;
		/*!
		\brief Статический метод возвращает сумму денег, которые юнит добавляет к казне области каждый ход
		его владельца.
		- Данный метод возвращает отрицательное значение.
		*/
		static size_type income();
		/*!
		\brief Чисто виртуальный метод возвращает поле TurnsToDouble объекта класса.
		*/
		virtual size_type turns_to_double() const = 0;
		/*!
		\brief Метод сообщает готов ли юнит к размножению.
		*/
		bool ready_to_double() const;
		/*!
		\brief Метод сообщает юниту, о том, что он размножился.
		- Поле TurnsFromDouble обнуляется.
		*/
		void has_doubled();
		/*!
		\brief Увеличивает поле TurnsFromDouble объекта класса на 1.
		*/
		void operator ++();
	};
	/*!
	\brief Класс моделирует юнит "пальма".
	- Другое имя класса, используемое в докуметации - пальма.
	*/
	struct Palm
		: public Tree
	{
		/*!
		\brief Деструктор по умолчанию.
		*/
		~Palm() = default;
		/*!
		\brief Конструктор.

		\param hex Значение для инициализации поля Field юнита.
		*/
		Palm(Hex * hex);
		/*!
		\brief Метод возвращает поле TurnsToDouble объекта класса.
		*/
		size_type turns_to_double() const;
		/*!
		\brief Метод возвращает тип юнита.
		*/
		unit_type type() const;
	};
	/*!
	\brief Класс моделирует юнит "ель".
	- Другое имя класса, используемое в докуметации - ель.
	*/
	struct Pine
		: public Tree
	{
		/*!
		\brief Деструктор по умолчанию.
		*/
		~Pine() = default;
		/*!
		\brief Конструктор.

		\param hex Значение для инициализации поля Field юнита.
		*/
		Pine(Hex * hex);
		/*!
		\brief Метод возвращает поле TurnsToDouble объекта класса.
		*/
		size_type turns_to_double() const;
		/*!
		\brief Метод возвращает тип юнита.
		*/
		unit_type type() const;
	};
	/*!
	\brief Класс моделирует юнит "могила".
	- Другое имя класса, используемое в докуметации - могила.
	*/
	struct Grave
		: public PassiveUnit
	{
		/*!
		\brief Деструктор по умолчанию.
		*/
		~Grave() = default;
		/*!
		\brief Конструктор.

		\param hex Значение для инициализации поля Field юнита.
		*/
		Grave(Hex * hex);
		/*!
		\brief Метод возвращает тип юнита.
		*/
		unit_type type() const;
		/*!
		\brief Метод возвращает условную ценность юнита.
		*/
		size_type cost() const;
		/*!
		\brief Статический метод возвращает сумму денег, которые юнит добавляет к казне области каждый ход
		его владельца.
		- Данный метод возвращает отрицательное значение.
		*/
		static size_type income();
	};
}
